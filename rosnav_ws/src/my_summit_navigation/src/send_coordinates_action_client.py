#! /usr/bin/env python
"""
opt/ros/kinetic/share/move_base_msgs/msg$ cat MoveBaseGoal.msg
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
geometry_msgs/PoseStamped target_pose

rosmsg show geometry_msgs/PoseStamped
std_msgs/Header header
  uint32 seq
  time stamp
  string frame_id
geometry_msgs/Pose pose
  geometry_msgs/Point position
    float64 x
    float64 y
    float64 z
  geometry_msgs/Quaternion orientation
    float64 x
    float64 y
    float64 z
    float64 w
    
    
    
    
rosmsg show move_base_msgs/MoveBaseActionResult
std_msgs/Header header
  uint32 seq
  time stamp
  string frame_id
actionlib_msgs/GoalStatus status
  uint8 PENDING=0
  uint8 ACTIVE=1
  uint8 PREEMPTED=2
  uint8 SUCCEEDED=3
  uint8 ABORTED=4
  uint8 REJECTED=5
  uint8 PREEMPTING=6
  uint8 RECALLING=7
  uint8 RECALLED=8
  uint8 LOST=9
  actionlib_msgs/GoalID goal_id
    time stamp
    string id
  uint8 status
  string text
move_base_msgs/MoveBaseResult result   




rosmsg show move_base_msgs/MoveBaseActionFeedback
std_msgs/Header header
  uint32 seq
  time stamp
  string frame_id
actionlib_msgs/GoalStatus status
  uint8 PENDING=0
  uint8 ACTIVE=1
  uint8 PREEMPTED=2
  uint8 SUCCEEDED=3
  uint8 ABORTED=4
  uint8 REJECTED=5
  uint8 PREEMPTING=6
  uint8 RECALLING=7
  uint8 RECALLED=8
  uint8 LOST=9
  actionlib_msgs/GoalID goal_id
    time stamp
    string id
  uint8 status
  string text
move_base_msgs/MoveBaseFeedback feedback
  geometry_msgs/PoseStamped base_position
    std_msgs/Header header
      uint32 seq
      time stamp
      string frame_id
    geometry_msgs/Pose pose
      geometry_msgs/Point position
        float64 x
        float64 y
        float64 z
      geometry_msgs/Quaternion orientation
        float64 x
        float64 y
        float64 z
        float64 w

"""
import rospy
import actionlib
import yaml
from move_base_msgs.msg import MoveBaseAction, MoveBaseActionResult, MoveBaseGoal

class SendCoords(object):

  def __init__(self):
    rospy.loginfo("Init /move_base simple action client")
    self.client = actionlib.SimpleActionClient('/move_base', MoveBaseAction)
    rospy.loginfo("Waiting for /move_base action server...")
    self.client.wait_for_server()
    rospy.loginfo("Server started")
    

  def sendGoal(self, goalText, goalSpot):
    target_pose = yaml.safe_load(goalText)
    target_pose = target_pose[goalSpot]
    print(target_pose)
    rospy.loginfo("Sending new goal to /move_base")
    goal = MoveBaseGoal()
    goal.target_pose.pose.position.x = target_pose['pose']['pose']['position']['x']
    goal.target_pose.pose.position.y = target_pose['pose']['pose']['position']['y']
    goal.target_pose.pose.position.z = target_pose['pose']['pose']['position']['z']
    goal.target_pose.pose.orientation.x = target_pose['pose']['pose']['orientation']['x']
    goal.target_pose.pose.orientation.y = target_pose['pose']['pose']['orientation']['y']
    goal.target_pose.pose.orientation.z = target_pose['pose']['pose']['orientation']['z']
    goal.target_pose.pose.orientation.w = target_pose['pose']['pose']['orientation']['w']
    goal.target_pose.header.frame_id = 'map'
    
    self.client.send_goal(goal)
    rospy.loginfo("Waiting for /move_base goal to complete")
    self.client.wait_for_result()
    rospy.loginfo("/move_base completed")
    status = self.client.get_state()
    if status == 3:
      completed = True
    else:
      completed = False
    rospy.loginfo("Success: {}".format(completed))

    return completed
    
  def getResult(self):
    result = self.client.get_result()
    print(result)
    if result.status == 3:
      completed = True
    else:
      completed = False
    return completed
    
if __name__ == "__main__": 
  rospy.init_node("moveBaseClient")
  sendcoords = SendCoords()
  status = sendcoords.sendGoal("someFancyPose", "junk")
  print("Status: {}".format(status))

    